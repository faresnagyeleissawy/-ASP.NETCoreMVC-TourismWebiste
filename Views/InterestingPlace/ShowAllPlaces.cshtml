@using EgyptTouristWebSite.ViewModel
@model PlacesViewModel
@using Newtonsoft.Json;

<partial name="MapPartialView" model="Model" />

<script>
    var myModel = @Html.Raw(JsonConvert.SerializeObject(Model));
    let placesCulturalLayer = creatFeatures(myModel.placesList[0], "rgba(39, 65, 245, 1)", "Cultural")
    let placesLeisure = creatFeatures(myModel.placesList[1], "rgba(39, 184, 255, 0.69)", "Leisure")
    let placesMedical = creatFeatures(myModel.placesList[2], "rgba(99, 245, 39, 1)", "Medical")
    let placesReligious = creatFeatures(myModel.placesList[3], "rgba(241, 245, 39, 1)", "Religious")
    map.addLayer(placesCulturalLayer);
    map.addLayer(placesLeisure);
    map.addLayer(placesMedical);
    map.addLayer(placesReligious);
    //creat layer list and handel checkbox
    creatLayerListHandelCheckBox(map);
</script>
@foreach(var placeList in Model.placesList)
{
    <div class="container">
        <h2>@placeList[0].Type.Type</h2>
        <div class="slider-container">
                <div class="slider" id="@placeList[0].Type.Type-slider">
                @foreach (var place in placeList)
                {
                    <div class="card">
                        <img src="/Images/@place.Image" alt="@place.Name">
                        <div class="card-body">
                            <h4>@place.Name</h4>
                            <p>@place.Description</p>
                            <div class="rating">
                                @for (int i = 0; i < place.Rate; i++)
                                {
                                    <span class="fa fa-star checked" style="color:gold"></span>
                                }
                                @for (int i = place.Rate; i < 5; i++)
                                {
                                    <span class="fa fa-star"></span>
                                }
                            </div>
                            <a href="@Url.Action("Details", "InterestingPlace", new { id = place.Id })" class="btn btn-primary">Details</a>
                        </div>
                    </div>
                }
            </div>
            <div class="slider-controls">
                    <button class="slider-btn slider-prev-btn" data-slider="#@placeList[0].Type.Type-slider"><i class="fas fa-chevron-left"></i></button>
                    <button class="slider-btn slider-next-btn" data-slider="#@placeList[0].Type.Type-slider"><i class="fas fa-chevron-right"></i></button>
            </div>
        </div>
            <button class="btn btn-primary" onclick="location.href='@Url.Action("ShowPlacesByCategory", "InterestingPlace", new { category = @placeList[0].Type.Type })'">View All</button>
</div>
}

<style>
    .slider-container {
        position: relative;
    }

    .slider {
        overflow-x: scroll; 
        white-space: nowrap;
        transition :  0.5s ease-in-out;
    }
    .slider::-webkit-scrollbar{
        display: none; /* Add this to remove the scroll bar */
    }  
    .slider .card {
         box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
         transition: 0.3s;
         border-radius: 5px;
         width: 250px;
         margin: 10px;
         display: inline-block;
     }
    
     .slider .card:hover {
         box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
     }

     .slider .card img {
         border-radius: 5px 5px 0 0;
         width: 100%;
         height: 150px;
         object-fit: cover;
     }

     .slider .card .card-body {
         padding: 10px;
     }

    .slider-controls {
        display:block;
        width: 100%;
        display: flex;
        justify-content: space-between;
        z-index: 5;
    }

    .slider-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
        transition: color 0.3s;
    }

     .slider-btn:hover {
         color: #ccc;
     }

    .slider-prev-btn {
        color: gold;
        margin-left: 10px;
    }

    .slider-next-btn {
        color: gold;
        margin-right: 10px;
    }
</style>

<script>
    const sliders = document.querySelectorAll('.slider');

    sliders.forEach(slider => {
        const prevBtn = slider.parentElement.querySelector('.slider-prev-btn');
        const nextBtn = slider.parentElement.querySelector('.slider-next-btn');

        let scrollAmount = 0;
        const cardWidth = slider.querySelector('.card').offsetWidth+20;
        const cardsDisplayed = Math.floor(slider.offsetWidth / cardWidth);
        const totalCards = slider.querySelectorAll('.card').length;

        // Show prev and next buttons only if more cards than displayed
        if (totalCards > cardsDisplayed) {
            prevBtn.style.display = 'block';
            nextBtn.style.display = 'block';
        } else {
            prevBtn.style.display = 'none';
            nextBtn.style.display = 'none';
        }

        // Prev and next butns functionality
        prevBtn.addEventListener('click', () => {
            if (scrollAmount !== 0) {
                scrollAmount += cardWidth;
                slider.scrollBy({ left: `-${cardWidth}`, behavior: "smooth" });
            }
        });

        nextBtn.addEventListener('click', () => {
            if (scrollAmount !== (slider.scrollWidth - slider.offsetWidth)) {
                scrollAmount += cardWidth;
                slider.scrollBy({ left:`${cardWidth}`,behavior: "smooth" });
                console.log(cardWidth);
            }
        });

        slider.addEventListener('scroll', () => {
            scrollAmount = slider.scrollLeft;
        });
    });
</script>
