@model List<TravelAgency>
@using Newtonsoft.Json;
<script>
	var url = "TravelAgency/Details/"
</script>
<partial name="MapPartialView" model="Model" />
<script>

    var myModel = @Html.Raw(JsonConvert.SerializeObject(Model));

	let place = creatFeatures(myModel, "placeholder.png", "Travel Agancy")

    map.addLayer(place);
	creatLayerListHandelCheckBox(map);
</script>

 <div class="container">
        <h2>Travel Agency</h2>
                @foreach (var place in Model)
                {
 
                                            <div class="wrapper">
                            <div class="card_s">
                                        <img src="/Images/@place.Image" alt="" srcset="">
                                <div class="descriptions">
                                            <h3 class="">@place.Name</h3>
                                    <p>
                                                <div class="rating">
                                        @for (int i = 0; i < place.Rate; i++)
                                        {
                                                <span class="fa fa-star checked" style="color:gold"></span>
                                        }
                                        @for (int i = place.Rate; i < 5; i++)
                                        {
                                                <span class="fa fa-star"></span>
                                        }
                                    </div>
                                        <button>
                                                    <a href="@Url.Action("Details","TravelAgency", new { id = place.Id })">Readmore</a>
                                    </button>
                                </div>
                            </div>
                        </div>

                        }


	@*@foreach (TravelAgency agancy in Model)
	{
		
			<div class="card ">
				<img src='~/Images/@agancy.Image' height="560">
				<div class="text-white"><p>@agancy.Name
					
						<div class="rating">
							@for (int i = 0; i < agancy.Rate; i++)
							{
								<span class="fa fa-star checked" style="color:gold"></span>

							}
							@for (int i = agancy.Rate; i < 5; i++)
							{
								<span class="fa fa-star"></span>

							}
						</div>
				<a id ="det" href="@Url.Action("Details", "TravelAgency", new { id = agancy.Id })" class="btn-primary" type="button">Details</a>
				<a id="anc" class="btn-primary" type="button" href="@agancy.Url"><span>Website</span></a>
				</div>
				
			
			</div>
			
	
	}*@
	



<style>
      <style>
         .slider-container {

    /*        position: relative;
    */
        }

        .slider {
            overflow-x: scroll;


                white-space: nowrap;

    /*        transition: 0.5s ease-in-out;
    */ 
        }

            .slider::-webkit-scrollbar {
                display: none; /* Add this to remove the scroll bar */
            }

           /* .slider .card {
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
                transition: 0.3s;
                border-radius: 5px;
                width: 250px;
                margin: 10px;
                display: inline-block;
            }

                .slider .card:hover {
                    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
                }

                .slider .card img {
                    border-radius: 5px 5px 0 0;
                    width: 100%;
                    height: 150px;
                    object-fit: cover;
                }

                .slider .card .card-body {
                    padding: 10px;
                }*/

        .slider-controls {
            display: block;
            width: 100%;
            display: flex;
            justify-content: space-between;
            z-index: 5;
        }

        .slider-btn {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            transition: color 0.3s;
        }

            .slider-btn:hover {
                color: #ccc;
            }

        .slider-prev-btn {
            color: gold;
            margin-left: 10px;
        }

        .slider-next-btn {
            color: gold;
            margin-right: 10px;
        }







    .wrapper{
    /*    position: absolute;
        top:50%;
        left:50%;*/
    /*    transform: translate(-50%, -50%);
    */   
    width:420px;

    /*    max-width: 350px;
        height:auto;*/

       /* display: flex;
        flex-wrap: wrap;
        justify-content: space-between;*/

           display: inline-block;  /*test/**/

    }
    .card_s{
       /* flex: 1;
        flex-basis: 300px;
        flex-grow: 0;*/
        height: 400px;
        background: #fff;
        border: 2px solid #fff;
        box-shadow: 0px 4px 7px rgba(0,0,0,.5);
        cursor: pointer;
        transition: all .5s cubic-bezier(.8,.5,.2,1.4);
        overflow: hidden;

        position: relative;


    }

    .card_s img{
        width: 100%;
        height:100%;
        transition: all .5s cubic-bezier(.8,.5,.2,1.4);
    }
    .descriptions{

        position: absolute;

        top:0px;
        left:0px;

        background-color: rgba(255,255,255,.7);
        width:100%;
        height:100%;
        transition: all .7s ease-in-out;
        padding: 20px;
        box-sizing: border-box;
        clip-path: circle(0% at 100% 100%);
        white-space: normal;

    }
    .card_s:hover .descriptions{
        left:0px;
        transition: all .7s ease-in-out;
        clip-path: circle(75%);
    }
    .card_s:hover{
        transition: all .5s cubic-bezier(.8,.5,.2,1.4);
        box-shadow: 0px 2px 3px rgba(0,0,0,.3);
        transform: scale(.97);
    }
    .card_s:hover img{
        transition: all .5s cubic-bezier(.8,.5,.2,1.4);
        transform: scale(1.6) rotate(20deg);
        filter: blur(3px);
    }
    .card_s h3{
        color: #ff3838;
        letter-spacing: 1px;
        margin: 0px;
    }
    .card_s p{

        line-height: 24px;
        height: 180px;
        overflow-y: clip;
    }
    .card_s pr{

        display:block;
    }
    .card_s button{
        width: fit-content;
        height: 40px;
        cursor: pointer;
        border-style: none;
        background-color: #ff3838;
        color:#fff;
        font-size: 15px;
        outline: none;
        box-shadow: 0px 2px 3px rgba(0,0,0,.4);
        transition: all .5s ease-in-out;
    }
    .card_s button:hover{
        transform: scale(.95) translateX(-5px);
        transition: all .5s ease-in-out;
    }



        /*.form-group{
            display:flex;
        }*/
    </style>





	
</style>


@section Scripts{
    <script defer>
        const sliders = document.querySelectorAll('.slider');
        console.log(sliders);

        sliders.forEach(slider => {
            const prevBtn = slider.parentElement.querySelector('.slider-prev-btn');
            const nextBtn = slider.parentElement.querySelector('.slider-next-btn');

            let scrollAmount = 0;
            const cardWidth = slider.querySelector('.card_s').offsetWidth + 20;
            const cardsDisplayed = Math.floor(slider.offsetWidth / cardWidth);
                const totalCards = slider.querySelectorAll('.card_s').length;

            // Show prev and next buttons only if more cards than displayed
            if (totalCards > cardsDisplayed) {
                prevBtn.style.display = 'block';
                nextBtn.style.display = 'block';
            } else {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            }

            // Prev and next butns functionality
            prevBtn.addEventListener('click', () => {
                if (scrollAmount !== 0) {
                    scrollAmount += cardWidth;
                    slider.scrollBy({ left: `-${cardWidth}`, behavior: "smooth" });
                }
            });

            nextBtn.addEventListener('click', () => {
                if (scrollAmount !== (slider.scrollWidth - slider.offsetWidth)) {
                    scrollAmount += cardWidth;
                    slider.scrollBy({ left: `${cardWidth}`, behavior: "smooth" });
                    console.log(cardWidth);
                }
            });

            slider.addEventListener('scroll', () => {
                scrollAmount = slider.scrollLeft;
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // Filter and search forms Functionality
            $('form').submit(showFiltered);
            // Clear All Filters button Functionality
            $('#resetFilterBtn').on('click', function (event) {
                location.reload();
                //$('#filterForm').trigger('reset');
                //$('#FullModel').show();
                //$('#accommodations-list-filtered').html('');
                //$('#searchBox').val('');
            });
        });

        function showFiltered(event) {
            event.preventDefault();
            //Prevent search of whitespace and null values in search box, and filters will trigger search only by filter button
            if (

                (jQuery.trim($('#searchBox').val()).length > 0 && event.target.id == 'searchForm')
                ||
                ($('#filterForm input[type="checkbox"]:checked').length != 0 && event.target.id == 'filterForm')

            ) {
                $('#FullModel').hide();
                ClearLayers();
                if (event.target.id == 'searchForm') { $('#filterForm').trigger('reset'); }else{$('#searchForm').trigger('reset');}
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        $('#accommodations-list-filtered').html(result);
                    },
                    error: function (xhr, status, error) {
                        console.log('Error: ' + error);
                    }
                });
            }
        }
    </script>
    
}
